using NUnit.Framework;
using TestGenerator.Lib;
using System.Linq;

namespace TestGenerator.Tests
{
    public class TestGeneratorTests
    {
        [Test]
        public void EmptyClassTest()
        {
            string testStr = @" namespace CustomNamespace
                                {
                                    public class Custom
                                    {

                                    }

                                }";

            TestUnit[] tests = TestsGenerator.Generate(testStr);
            Assert.AreEqual(0, tests.Count());
        }

        [Test]
        public void ClassWithDependencyTest()
        {
            string testStr = @"
                                using System;
                                using System.Collections.Generic;
                                using System.Text;

                                namespace CustomNamespace1
                                {

                                    public interface IFoo
                                    {

                                    }

                                    public class Custom1
                                    {
                                        public void Method1()
                                        {

                                        }

                                        public int Method2(int arg)
                                        {
                                            return 42;
                                        }

                                        public Custom1(int a, string b, IFoo c)
                                        {

                                        }
                                    }
                                }";

            string expected = @"using System;
using System.Collections.Generic;
using System.Text;
using NUnit.Framework;
using Moq;
using CustomNamespace1;

namespace CustomNamespace1.Tests
{
    public class Custom1Tests
    {
        private Custom1 _Custom1UnderTest;
        private Mock<IFoo> _c_dependency;
        [SetUp]
        public void SetUp()
        {
            int a = default;
            string b = default;
            _c_dependency = new Mock<IFoo>();
            _Custom1UnderTest = new Custom1(a, b, _c_dependency.Object);
        }

        [Test]
        public void Method1Test()
        {
            _Custom1UnderTest.Method1();
            Assert.Fail("+"\"Autogenerated\""+@");
        }

        [Test]
        public void Method2Test()
        {
            int arg = default;
            int actual = _Custom1UnderTest.Method2(arg);
            int expected = default;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("+"\"Autogenerated\""+@");
        }
    }
}";

            TestUnit[] tests = TestsGenerator.Generate(testStr);


            Assert.AreEqual(1, tests.Count());
            Assert.AreEqual(expected, tests[0].Test);
        }

        [Test]
        public void ClassWithoutDependecyTest()
        {
            string testStr = @" 
                                using System;
                                using System.Collections.Generic;
                                using System.Text;
                                namespace CustomNamespace2
                                {
                                    public class Custom2
                                    {
                                        public string Method1()
                                        {
                                            return null;
                                        }

                                        public void Method2(int arg, char b)
                                        {

                                        }
                                    }
                                }";

            string expected = @"using System;
using System.Collections.Generic;
using System.Text;
using NUnit.Framework;
using Moq;
using CustomNamespace2;

namespace CustomNamespace2.Tests
{
    public class Custom2Tests
    {
        private Custom2 _Custom2UnderTest;
        [SetUp]
        public void SetUp()
        {
            _Custom2UnderTest = new Custom2();
        }

        [Test]
        public void Method1Test()
        {
            string actual = _Custom2UnderTest.Method1();
            string expected = default;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("+"\"Autogenerated\""+@");
        }

        [Test]
        public void Method2Test()
        {
            int arg = default;
            char b = default;
            _Custom2UnderTest.Method2(arg, b);
            Assert.Fail("+"\"Autogenerated\""+@");
        }
    }
}";

            TestUnit[] tests = TestsGenerator.Generate(testStr);

            Assert.AreEqual(1, tests.Count());
            Assert.AreEqual(expected, tests[0].Test);
        }
    }
}